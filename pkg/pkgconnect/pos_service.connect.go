// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pos_service.proto

package pkgconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	pkg "github.com/KaguraGateway/cafelogos-grpc/pkg/"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// PosServiceName is the fully-qualified name of the PosService service.
	PosServiceName = "cafelogos.PosService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PosServiceGetOrdersProcedure is the fully-qualified name of the PosService's GetOrders RPC.
	PosServiceGetOrdersProcedure = "/cafelogos.PosService/GetOrders"
	// PosServicePostOrderProcedure is the fully-qualified name of the PosService's PostOrder RPC.
	PosServicePostOrderProcedure = "/cafelogos.PosService/PostOrder"
	// PosServiceGetProductsProcedure is the fully-qualified name of the PosService's GetProducts RPC.
	PosServiceGetProductsProcedure = "/cafelogos.PosService/GetProducts"
	// PosServiceGetProductCategoriesProcedure is the fully-qualified name of the PosService's
	// GetProductCategories RPC.
	PosServiceGetProductCategoriesProcedure = "/cafelogos.PosService/GetProductCategories"
	// PosServicePostProductCategoryProcedure is the fully-qualified name of the PosService's
	// PostProductCategory RPC.
	PosServicePostProductCategoryProcedure = "/cafelogos.PosService/PostProductCategory"
	// PosServicePostProductProcedure is the fully-qualified name of the PosService's PostProduct RPC.
	PosServicePostProductProcedure = "/cafelogos.PosService/PostProduct"
	// PosServiceUpdateProductProcedure is the fully-qualified name of the PosService's UpdateProduct
	// RPC.
	PosServiceUpdateProductProcedure = "/cafelogos.PosService/UpdateProduct"
	// PosServiceDeleteProductProcedure is the fully-qualified name of the PosService's DeleteProduct
	// RPC.
	PosServiceDeleteProductProcedure = "/cafelogos.PosService/DeleteProduct"
	// PosServicePostStockProcedure is the fully-qualified name of the PosService's PostStock RPC.
	PosServicePostStockProcedure = "/cafelogos.PosService/PostStock"
	// PosServiceGetStocksProcedure is the fully-qualified name of the PosService's GetStocks RPC.
	PosServiceGetStocksProcedure = "/cafelogos.PosService/GetStocks"
	// PosServicePostCoffeeBeanProcedure is the fully-qualified name of the PosService's PostCoffeeBean
	// RPC.
	PosServicePostCoffeeBeanProcedure = "/cafelogos.PosService/PostCoffeeBean"
	// PosServiceGetCoffeeBeansProcedure is the fully-qualified name of the PosService's GetCoffeeBeans
	// RPC.
	PosServiceGetCoffeeBeansProcedure = "/cafelogos.PosService/GetCoffeeBeans"
	// PosServiceDeleteAllOrdersProcedure is the fully-qualified name of the PosService's
	// DeleteAllOrders RPC.
	PosServiceDeleteAllOrdersProcedure = "/cafelogos.PosService/DeleteAllOrders"
)

// PosServiceClient is a client for the cafelogos.PosService service.
type PosServiceClient interface {
	GetOrders(context.Context, *connect.Request[pkg.GetOrdersRequest]) (*connect.Response[pkg.GetOrdersResponse], error)
	PostOrder(context.Context, *connect.Request[pkg.PostOrderRequest]) (*connect.Response[pkg.Empty], error)
	GetProducts(context.Context, *connect.Request[pkg.Empty]) (*connect.Response[pkg.GetProductsResponse], error)
	// Only Admin
	GetProductCategories(context.Context, *connect.Request[pkg.Empty]) (*connect.Response[pkg.GetProductCategoriesResponse], error)
	PostProductCategory(context.Context, *connect.Request[pkg.PostProductCategoryRequest]) (*connect.Response[pkg.Empty], error)
	PostProduct(context.Context, *connect.Request[pkg.PostProductRequest]) (*connect.Response[pkg.Empty], error)
	UpdateProduct(context.Context, *connect.Request[pkg.UpdateProductRequest]) (*connect.Response[pkg.Empty], error)
	DeleteProduct(context.Context, *connect.Request[pkg.DeleteProductRequest]) (*connect.Response[pkg.Empty], error)
	PostStock(context.Context, *connect.Request[pkg.PostStockRequest]) (*connect.Response[pkg.Empty], error)
	GetStocks(context.Context, *connect.Request[pkg.Empty]) (*connect.Response[pkg.GetStocksResponse], error)
	PostCoffeeBean(context.Context, *connect.Request[pkg.PostCoffeeBeanRequest]) (*connect.Response[pkg.Empty], error)
	GetCoffeeBeans(context.Context, *connect.Request[pkg.Empty]) (*connect.Response[pkg.GetCoffeeBeansResponse], error)
	DeleteAllOrders(context.Context, *connect.Request[pkg.Empty]) (*connect.Response[pkg.Empty], error)
}

// NewPosServiceClient constructs a client for the cafelogos.PosService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPosServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PosServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &posServiceClient{
		getOrders: connect.NewClient[pkg.GetOrdersRequest, pkg.GetOrdersResponse](
			httpClient,
			baseURL+PosServiceGetOrdersProcedure,
			opts...,
		),
		postOrder: connect.NewClient[pkg.PostOrderRequest, pkg.Empty](
			httpClient,
			baseURL+PosServicePostOrderProcedure,
			opts...,
		),
		getProducts: connect.NewClient[pkg.Empty, pkg.GetProductsResponse](
			httpClient,
			baseURL+PosServiceGetProductsProcedure,
			opts...,
		),
		getProductCategories: connect.NewClient[pkg.Empty, pkg.GetProductCategoriesResponse](
			httpClient,
			baseURL+PosServiceGetProductCategoriesProcedure,
			opts...,
		),
		postProductCategory: connect.NewClient[pkg.PostProductCategoryRequest, pkg.Empty](
			httpClient,
			baseURL+PosServicePostProductCategoryProcedure,
			opts...,
		),
		postProduct: connect.NewClient[pkg.PostProductRequest, pkg.Empty](
			httpClient,
			baseURL+PosServicePostProductProcedure,
			opts...,
		),
		updateProduct: connect.NewClient[pkg.UpdateProductRequest, pkg.Empty](
			httpClient,
			baseURL+PosServiceUpdateProductProcedure,
			opts...,
		),
		deleteProduct: connect.NewClient[pkg.DeleteProductRequest, pkg.Empty](
			httpClient,
			baseURL+PosServiceDeleteProductProcedure,
			opts...,
		),
		postStock: connect.NewClient[pkg.PostStockRequest, pkg.Empty](
			httpClient,
			baseURL+PosServicePostStockProcedure,
			opts...,
		),
		getStocks: connect.NewClient[pkg.Empty, pkg.GetStocksResponse](
			httpClient,
			baseURL+PosServiceGetStocksProcedure,
			opts...,
		),
		postCoffeeBean: connect.NewClient[pkg.PostCoffeeBeanRequest, pkg.Empty](
			httpClient,
			baseURL+PosServicePostCoffeeBeanProcedure,
			opts...,
		),
		getCoffeeBeans: connect.NewClient[pkg.Empty, pkg.GetCoffeeBeansResponse](
			httpClient,
			baseURL+PosServiceGetCoffeeBeansProcedure,
			opts...,
		),
		deleteAllOrders: connect.NewClient[pkg.Empty, pkg.Empty](
			httpClient,
			baseURL+PosServiceDeleteAllOrdersProcedure,
			opts...,
		),
	}
}

// posServiceClient implements PosServiceClient.
type posServiceClient struct {
	getOrders            *connect.Client[pkg.GetOrdersRequest, pkg.GetOrdersResponse]
	postOrder            *connect.Client[pkg.PostOrderRequest, pkg.Empty]
	getProducts          *connect.Client[pkg.Empty, pkg.GetProductsResponse]
	getProductCategories *connect.Client[pkg.Empty, pkg.GetProductCategoriesResponse]
	postProductCategory  *connect.Client[pkg.PostProductCategoryRequest, pkg.Empty]
	postProduct          *connect.Client[pkg.PostProductRequest, pkg.Empty]
	updateProduct        *connect.Client[pkg.UpdateProductRequest, pkg.Empty]
	deleteProduct        *connect.Client[pkg.DeleteProductRequest, pkg.Empty]
	postStock            *connect.Client[pkg.PostStockRequest, pkg.Empty]
	getStocks            *connect.Client[pkg.Empty, pkg.GetStocksResponse]
	postCoffeeBean       *connect.Client[pkg.PostCoffeeBeanRequest, pkg.Empty]
	getCoffeeBeans       *connect.Client[pkg.Empty, pkg.GetCoffeeBeansResponse]
	deleteAllOrders      *connect.Client[pkg.Empty, pkg.Empty]
}

// GetOrders calls cafelogos.PosService.GetOrders.
func (c *posServiceClient) GetOrders(ctx context.Context, req *connect.Request[pkg.GetOrdersRequest]) (*connect.Response[pkg.GetOrdersResponse], error) {
	return c.getOrders.CallUnary(ctx, req)
}

// PostOrder calls cafelogos.PosService.PostOrder.
func (c *posServiceClient) PostOrder(ctx context.Context, req *connect.Request[pkg.PostOrderRequest]) (*connect.Response[pkg.Empty], error) {
	return c.postOrder.CallUnary(ctx, req)
}

// GetProducts calls cafelogos.PosService.GetProducts.
func (c *posServiceClient) GetProducts(ctx context.Context, req *connect.Request[pkg.Empty]) (*connect.Response[pkg.GetProductsResponse], error) {
	return c.getProducts.CallUnary(ctx, req)
}

// GetProductCategories calls cafelogos.PosService.GetProductCategories.
func (c *posServiceClient) GetProductCategories(ctx context.Context, req *connect.Request[pkg.Empty]) (*connect.Response[pkg.GetProductCategoriesResponse], error) {
	return c.getProductCategories.CallUnary(ctx, req)
}

// PostProductCategory calls cafelogos.PosService.PostProductCategory.
func (c *posServiceClient) PostProductCategory(ctx context.Context, req *connect.Request[pkg.PostProductCategoryRequest]) (*connect.Response[pkg.Empty], error) {
	return c.postProductCategory.CallUnary(ctx, req)
}

// PostProduct calls cafelogos.PosService.PostProduct.
func (c *posServiceClient) PostProduct(ctx context.Context, req *connect.Request[pkg.PostProductRequest]) (*connect.Response[pkg.Empty], error) {
	return c.postProduct.CallUnary(ctx, req)
}

// UpdateProduct calls cafelogos.PosService.UpdateProduct.
func (c *posServiceClient) UpdateProduct(ctx context.Context, req *connect.Request[pkg.UpdateProductRequest]) (*connect.Response[pkg.Empty], error) {
	return c.updateProduct.CallUnary(ctx, req)
}

// DeleteProduct calls cafelogos.PosService.DeleteProduct.
func (c *posServiceClient) DeleteProduct(ctx context.Context, req *connect.Request[pkg.DeleteProductRequest]) (*connect.Response[pkg.Empty], error) {
	return c.deleteProduct.CallUnary(ctx, req)
}

// PostStock calls cafelogos.PosService.PostStock.
func (c *posServiceClient) PostStock(ctx context.Context, req *connect.Request[pkg.PostStockRequest]) (*connect.Response[pkg.Empty], error) {
	return c.postStock.CallUnary(ctx, req)
}

// GetStocks calls cafelogos.PosService.GetStocks.
func (c *posServiceClient) GetStocks(ctx context.Context, req *connect.Request[pkg.Empty]) (*connect.Response[pkg.GetStocksResponse], error) {
	return c.getStocks.CallUnary(ctx, req)
}

// PostCoffeeBean calls cafelogos.PosService.PostCoffeeBean.
func (c *posServiceClient) PostCoffeeBean(ctx context.Context, req *connect.Request[pkg.PostCoffeeBeanRequest]) (*connect.Response[pkg.Empty], error) {
	return c.postCoffeeBean.CallUnary(ctx, req)
}

// GetCoffeeBeans calls cafelogos.PosService.GetCoffeeBeans.
func (c *posServiceClient) GetCoffeeBeans(ctx context.Context, req *connect.Request[pkg.Empty]) (*connect.Response[pkg.GetCoffeeBeansResponse], error) {
	return c.getCoffeeBeans.CallUnary(ctx, req)
}

// DeleteAllOrders calls cafelogos.PosService.DeleteAllOrders.
func (c *posServiceClient) DeleteAllOrders(ctx context.Context, req *connect.Request[pkg.Empty]) (*connect.Response[pkg.Empty], error) {
	return c.deleteAllOrders.CallUnary(ctx, req)
}

// PosServiceHandler is an implementation of the cafelogos.PosService service.
type PosServiceHandler interface {
	GetOrders(context.Context, *connect.Request[pkg.GetOrdersRequest]) (*connect.Response[pkg.GetOrdersResponse], error)
	PostOrder(context.Context, *connect.Request[pkg.PostOrderRequest]) (*connect.Response[pkg.Empty], error)
	GetProducts(context.Context, *connect.Request[pkg.Empty]) (*connect.Response[pkg.GetProductsResponse], error)
	// Only Admin
	GetProductCategories(context.Context, *connect.Request[pkg.Empty]) (*connect.Response[pkg.GetProductCategoriesResponse], error)
	PostProductCategory(context.Context, *connect.Request[pkg.PostProductCategoryRequest]) (*connect.Response[pkg.Empty], error)
	PostProduct(context.Context, *connect.Request[pkg.PostProductRequest]) (*connect.Response[pkg.Empty], error)
	UpdateProduct(context.Context, *connect.Request[pkg.UpdateProductRequest]) (*connect.Response[pkg.Empty], error)
	DeleteProduct(context.Context, *connect.Request[pkg.DeleteProductRequest]) (*connect.Response[pkg.Empty], error)
	PostStock(context.Context, *connect.Request[pkg.PostStockRequest]) (*connect.Response[pkg.Empty], error)
	GetStocks(context.Context, *connect.Request[pkg.Empty]) (*connect.Response[pkg.GetStocksResponse], error)
	PostCoffeeBean(context.Context, *connect.Request[pkg.PostCoffeeBeanRequest]) (*connect.Response[pkg.Empty], error)
	GetCoffeeBeans(context.Context, *connect.Request[pkg.Empty]) (*connect.Response[pkg.GetCoffeeBeansResponse], error)
	DeleteAllOrders(context.Context, *connect.Request[pkg.Empty]) (*connect.Response[pkg.Empty], error)
}

// NewPosServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPosServiceHandler(svc PosServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	posServiceGetOrdersHandler := connect.NewUnaryHandler(
		PosServiceGetOrdersProcedure,
		svc.GetOrders,
		opts...,
	)
	posServicePostOrderHandler := connect.NewUnaryHandler(
		PosServicePostOrderProcedure,
		svc.PostOrder,
		opts...,
	)
	posServiceGetProductsHandler := connect.NewUnaryHandler(
		PosServiceGetProductsProcedure,
		svc.GetProducts,
		opts...,
	)
	posServiceGetProductCategoriesHandler := connect.NewUnaryHandler(
		PosServiceGetProductCategoriesProcedure,
		svc.GetProductCategories,
		opts...,
	)
	posServicePostProductCategoryHandler := connect.NewUnaryHandler(
		PosServicePostProductCategoryProcedure,
		svc.PostProductCategory,
		opts...,
	)
	posServicePostProductHandler := connect.NewUnaryHandler(
		PosServicePostProductProcedure,
		svc.PostProduct,
		opts...,
	)
	posServiceUpdateProductHandler := connect.NewUnaryHandler(
		PosServiceUpdateProductProcedure,
		svc.UpdateProduct,
		opts...,
	)
	posServiceDeleteProductHandler := connect.NewUnaryHandler(
		PosServiceDeleteProductProcedure,
		svc.DeleteProduct,
		opts...,
	)
	posServicePostStockHandler := connect.NewUnaryHandler(
		PosServicePostStockProcedure,
		svc.PostStock,
		opts...,
	)
	posServiceGetStocksHandler := connect.NewUnaryHandler(
		PosServiceGetStocksProcedure,
		svc.GetStocks,
		opts...,
	)
	posServicePostCoffeeBeanHandler := connect.NewUnaryHandler(
		PosServicePostCoffeeBeanProcedure,
		svc.PostCoffeeBean,
		opts...,
	)
	posServiceGetCoffeeBeansHandler := connect.NewUnaryHandler(
		PosServiceGetCoffeeBeansProcedure,
		svc.GetCoffeeBeans,
		opts...,
	)
	posServiceDeleteAllOrdersHandler := connect.NewUnaryHandler(
		PosServiceDeleteAllOrdersProcedure,
		svc.DeleteAllOrders,
		opts...,
	)
	return "/cafelogos.PosService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PosServiceGetOrdersProcedure:
			posServiceGetOrdersHandler.ServeHTTP(w, r)
		case PosServicePostOrderProcedure:
			posServicePostOrderHandler.ServeHTTP(w, r)
		case PosServiceGetProductsProcedure:
			posServiceGetProductsHandler.ServeHTTP(w, r)
		case PosServiceGetProductCategoriesProcedure:
			posServiceGetProductCategoriesHandler.ServeHTTP(w, r)
		case PosServicePostProductCategoryProcedure:
			posServicePostProductCategoryHandler.ServeHTTP(w, r)
		case PosServicePostProductProcedure:
			posServicePostProductHandler.ServeHTTP(w, r)
		case PosServiceUpdateProductProcedure:
			posServiceUpdateProductHandler.ServeHTTP(w, r)
		case PosServiceDeleteProductProcedure:
			posServiceDeleteProductHandler.ServeHTTP(w, r)
		case PosServicePostStockProcedure:
			posServicePostStockHandler.ServeHTTP(w, r)
		case PosServiceGetStocksProcedure:
			posServiceGetStocksHandler.ServeHTTP(w, r)
		case PosServicePostCoffeeBeanProcedure:
			posServicePostCoffeeBeanHandler.ServeHTTP(w, r)
		case PosServiceGetCoffeeBeansProcedure:
			posServiceGetCoffeeBeansHandler.ServeHTTP(w, r)
		case PosServiceDeleteAllOrdersProcedure:
			posServiceDeleteAllOrdersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPosServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPosServiceHandler struct{}

func (UnimplementedPosServiceHandler) GetOrders(context.Context, *connect.Request[pkg.GetOrdersRequest]) (*connect.Response[pkg.GetOrdersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cafelogos.PosService.GetOrders is not implemented"))
}

func (UnimplementedPosServiceHandler) PostOrder(context.Context, *connect.Request[pkg.PostOrderRequest]) (*connect.Response[pkg.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cafelogos.PosService.PostOrder is not implemented"))
}

func (UnimplementedPosServiceHandler) GetProducts(context.Context, *connect.Request[pkg.Empty]) (*connect.Response[pkg.GetProductsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cafelogos.PosService.GetProducts is not implemented"))
}

func (UnimplementedPosServiceHandler) GetProductCategories(context.Context, *connect.Request[pkg.Empty]) (*connect.Response[pkg.GetProductCategoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cafelogos.PosService.GetProductCategories is not implemented"))
}

func (UnimplementedPosServiceHandler) PostProductCategory(context.Context, *connect.Request[pkg.PostProductCategoryRequest]) (*connect.Response[pkg.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cafelogos.PosService.PostProductCategory is not implemented"))
}

func (UnimplementedPosServiceHandler) PostProduct(context.Context, *connect.Request[pkg.PostProductRequest]) (*connect.Response[pkg.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cafelogos.PosService.PostProduct is not implemented"))
}

func (UnimplementedPosServiceHandler) UpdateProduct(context.Context, *connect.Request[pkg.UpdateProductRequest]) (*connect.Response[pkg.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cafelogos.PosService.UpdateProduct is not implemented"))
}

func (UnimplementedPosServiceHandler) DeleteProduct(context.Context, *connect.Request[pkg.DeleteProductRequest]) (*connect.Response[pkg.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cafelogos.PosService.DeleteProduct is not implemented"))
}

func (UnimplementedPosServiceHandler) PostStock(context.Context, *connect.Request[pkg.PostStockRequest]) (*connect.Response[pkg.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cafelogos.PosService.PostStock is not implemented"))
}

func (UnimplementedPosServiceHandler) GetStocks(context.Context, *connect.Request[pkg.Empty]) (*connect.Response[pkg.GetStocksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cafelogos.PosService.GetStocks is not implemented"))
}

func (UnimplementedPosServiceHandler) PostCoffeeBean(context.Context, *connect.Request[pkg.PostCoffeeBeanRequest]) (*connect.Response[pkg.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cafelogos.PosService.PostCoffeeBean is not implemented"))
}

func (UnimplementedPosServiceHandler) GetCoffeeBeans(context.Context, *connect.Request[pkg.Empty]) (*connect.Response[pkg.GetCoffeeBeansResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cafelogos.PosService.GetCoffeeBeans is not implemented"))
}

func (UnimplementedPosServiceHandler) DeleteAllOrders(context.Context, *connect.Request[pkg.Empty]) (*connect.Response[pkg.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cafelogos.PosService.DeleteAllOrders is not implemented"))
}
