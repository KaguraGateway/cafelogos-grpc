// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.2
// source: proto/pos_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PosServiceClient is the client API for PosService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PosServiceClient interface {
	GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error)
	PostOrder(ctx context.Context, in *PostOrderRequest, opts ...grpc.CallOption) (*Empty, error)
	GetProducts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetProductsResponse, error)
	// Only Admin
	GetProductCategories(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetProductCategoriesResponse, error)
	PostProductCategory(ctx context.Context, in *PostProductCategoryRequest, opts ...grpc.CallOption) (*Empty, error)
	PostProduct(ctx context.Context, in *PostProductRequest, opts ...grpc.CallOption) (*Empty, error)
	UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*Empty, error)
	PostStock(ctx context.Context, in *PostStockRequest, opts ...grpc.CallOption) (*Empty, error)
	GetStocks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetStocksResponse, error)
	PostCoffeeBean(ctx context.Context, in *PostCoffeeBeanRequest, opts ...grpc.CallOption) (*Empty, error)
	GetCoffeeBeans(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetCoffeeBeansResponse, error)
	DeleteAllOrders(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type posServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPosServiceClient(cc grpc.ClientConnInterface) PosServiceClient {
	return &posServiceClient{cc}
}

func (c *posServiceClient) GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error) {
	out := new(GetOrdersResponse)
	err := c.cc.Invoke(ctx, "/cafelogos.PosService/GetOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posServiceClient) PostOrder(ctx context.Context, in *PostOrderRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/cafelogos.PosService/PostOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posServiceClient) GetProducts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetProductsResponse, error) {
	out := new(GetProductsResponse)
	err := c.cc.Invoke(ctx, "/cafelogos.PosService/GetProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posServiceClient) GetProductCategories(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetProductCategoriesResponse, error) {
	out := new(GetProductCategoriesResponse)
	err := c.cc.Invoke(ctx, "/cafelogos.PosService/GetProductCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posServiceClient) PostProductCategory(ctx context.Context, in *PostProductCategoryRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/cafelogos.PosService/PostProductCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posServiceClient) PostProduct(ctx context.Context, in *PostProductRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/cafelogos.PosService/PostProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posServiceClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/cafelogos.PosService/UpdateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posServiceClient) DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/cafelogos.PosService/DeleteProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posServiceClient) PostStock(ctx context.Context, in *PostStockRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/cafelogos.PosService/PostStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posServiceClient) GetStocks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetStocksResponse, error) {
	out := new(GetStocksResponse)
	err := c.cc.Invoke(ctx, "/cafelogos.PosService/GetStocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posServiceClient) PostCoffeeBean(ctx context.Context, in *PostCoffeeBeanRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/cafelogos.PosService/PostCoffeeBean", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posServiceClient) GetCoffeeBeans(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetCoffeeBeansResponse, error) {
	out := new(GetCoffeeBeansResponse)
	err := c.cc.Invoke(ctx, "/cafelogos.PosService/GetCoffeeBeans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posServiceClient) DeleteAllOrders(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/cafelogos.PosService/DeleteAllOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PosServiceServer is the server API for PosService service.
// All implementations should embed UnimplementedPosServiceServer
// for forward compatibility
type PosServiceServer interface {
	GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error)
	PostOrder(context.Context, *PostOrderRequest) (*Empty, error)
	GetProducts(context.Context, *Empty) (*GetProductsResponse, error)
	// Only Admin
	GetProductCategories(context.Context, *Empty) (*GetProductCategoriesResponse, error)
	PostProductCategory(context.Context, *PostProductCategoryRequest) (*Empty, error)
	PostProduct(context.Context, *PostProductRequest) (*Empty, error)
	UpdateProduct(context.Context, *UpdateProductRequest) (*Empty, error)
	DeleteProduct(context.Context, *DeleteProductRequest) (*Empty, error)
	PostStock(context.Context, *PostStockRequest) (*Empty, error)
	GetStocks(context.Context, *Empty) (*GetStocksResponse, error)
	PostCoffeeBean(context.Context, *PostCoffeeBeanRequest) (*Empty, error)
	GetCoffeeBeans(context.Context, *Empty) (*GetCoffeeBeansResponse, error)
	DeleteAllOrders(context.Context, *Empty) (*Empty, error)
}

// UnimplementedPosServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPosServiceServer struct {
}

func (UnimplementedPosServiceServer) GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (UnimplementedPosServiceServer) PostOrder(context.Context, *PostOrderRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostOrder not implemented")
}
func (UnimplementedPosServiceServer) GetProducts(context.Context, *Empty) (*GetProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}
func (UnimplementedPosServiceServer) GetProductCategories(context.Context, *Empty) (*GetProductCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductCategories not implemented")
}
func (UnimplementedPosServiceServer) PostProductCategory(context.Context, *PostProductCategoryRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostProductCategory not implemented")
}
func (UnimplementedPosServiceServer) PostProduct(context.Context, *PostProductRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostProduct not implemented")
}
func (UnimplementedPosServiceServer) UpdateProduct(context.Context, *UpdateProductRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedPosServiceServer) DeleteProduct(context.Context, *DeleteProductRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedPosServiceServer) PostStock(context.Context, *PostStockRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostStock not implemented")
}
func (UnimplementedPosServiceServer) GetStocks(context.Context, *Empty) (*GetStocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStocks not implemented")
}
func (UnimplementedPosServiceServer) PostCoffeeBean(context.Context, *PostCoffeeBeanRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCoffeeBean not implemented")
}
func (UnimplementedPosServiceServer) GetCoffeeBeans(context.Context, *Empty) (*GetCoffeeBeansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoffeeBeans not implemented")
}
func (UnimplementedPosServiceServer) DeleteAllOrders(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllOrders not implemented")
}

// UnsafePosServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PosServiceServer will
// result in compilation errors.
type UnsafePosServiceServer interface {
	mustEmbedUnimplementedPosServiceServer()
}

func RegisterPosServiceServer(s grpc.ServiceRegistrar, srv PosServiceServer) {
	s.RegisterService(&PosService_ServiceDesc, srv)
}

func _PosService_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosServiceServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cafelogos.PosService/GetOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosServiceServer).GetOrders(ctx, req.(*GetOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosService_PostOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosServiceServer).PostOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cafelogos.PosService/PostOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosServiceServer).PostOrder(ctx, req.(*PostOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosService_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosServiceServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cafelogos.PosService/GetProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosServiceServer).GetProducts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosService_GetProductCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosServiceServer).GetProductCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cafelogos.PosService/GetProductCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosServiceServer).GetProductCategories(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosService_PostProductCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostProductCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosServiceServer).PostProductCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cafelogos.PosService/PostProductCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosServiceServer).PostProductCategory(ctx, req.(*PostProductCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosService_PostProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosServiceServer).PostProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cafelogos.PosService/PostProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosServiceServer).PostProduct(ctx, req.(*PostProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosService_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cafelogos.PosService/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosServiceServer).UpdateProduct(ctx, req.(*UpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosService_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cafelogos.PosService/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosServiceServer).DeleteProduct(ctx, req.(*DeleteProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosService_PostStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosServiceServer).PostStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cafelogos.PosService/PostStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosServiceServer).PostStock(ctx, req.(*PostStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosService_GetStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosServiceServer).GetStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cafelogos.PosService/GetStocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosServiceServer).GetStocks(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosService_PostCoffeeBean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCoffeeBeanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosServiceServer).PostCoffeeBean(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cafelogos.PosService/PostCoffeeBean",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosServiceServer).PostCoffeeBean(ctx, req.(*PostCoffeeBeanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosService_GetCoffeeBeans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosServiceServer).GetCoffeeBeans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cafelogos.PosService/GetCoffeeBeans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosServiceServer).GetCoffeeBeans(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosService_DeleteAllOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosServiceServer).DeleteAllOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cafelogos.PosService/DeleteAllOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosServiceServer).DeleteAllOrders(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// PosService_ServiceDesc is the grpc.ServiceDesc for PosService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PosService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cafelogos.PosService",
	HandlerType: (*PosServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrders",
			Handler:    _PosService_GetOrders_Handler,
		},
		{
			MethodName: "PostOrder",
			Handler:    _PosService_PostOrder_Handler,
		},
		{
			MethodName: "GetProducts",
			Handler:    _PosService_GetProducts_Handler,
		},
		{
			MethodName: "GetProductCategories",
			Handler:    _PosService_GetProductCategories_Handler,
		},
		{
			MethodName: "PostProductCategory",
			Handler:    _PosService_PostProductCategory_Handler,
		},
		{
			MethodName: "PostProduct",
			Handler:    _PosService_PostProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _PosService_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _PosService_DeleteProduct_Handler,
		},
		{
			MethodName: "PostStock",
			Handler:    _PosService_PostStock_Handler,
		},
		{
			MethodName: "GetStocks",
			Handler:    _PosService_GetStocks_Handler,
		},
		{
			MethodName: "PostCoffeeBean",
			Handler:    _PosService_PostCoffeeBean_Handler,
		},
		{
			MethodName: "GetCoffeeBeans",
			Handler:    _PosService_GetCoffeeBeans_Handler,
		},
		{
			MethodName: "DeleteAllOrders",
			Handler:    _PosService_DeleteAllOrders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pos_service.proto",
}
