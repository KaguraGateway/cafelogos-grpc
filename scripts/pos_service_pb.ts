// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file pos_service.proto (package cafelogos, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum cafelogos.ProductType
 */
export enum ProductType {
  /**
   * @generated from enum value: COFFEE = 0;
   */
  COFFEE = 0,

  /**
   * @generated from enum value: OTHER = 1;
   */
  OTHER = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(ProductType)
proto3.util.setEnumType(ProductType, "cafelogos.ProductType", [
  { no: 0, name: "COFFEE" },
  { no: 1, name: "OTHER" },
]);

/**
 * *
 * Request/Response
 *
 * @generated from message cafelogos.GetOrdersRequest
 */
export class GetOrdersRequest extends Message<GetOrdersRequest> {
  constructor(data?: PartialMessage<GetOrdersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.GetOrdersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrdersRequest {
    return new GetOrdersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrdersRequest {
    return new GetOrdersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrdersRequest {
    return new GetOrdersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrdersRequest | PlainMessage<GetOrdersRequest> | undefined, b: GetOrdersRequest | PlainMessage<GetOrdersRequest> | undefined): boolean {
    return proto3.util.equals(GetOrdersRequest, a, b);
  }
}

/**
 * @generated from message cafelogos.GetOrdersResponse
 */
export class GetOrdersResponse extends Message<GetOrdersResponse> {
  /**
   * @generated from field: repeated cafelogos.Order orders = 1;
   */
  orders: Order[] = [];

  constructor(data?: PartialMessage<GetOrdersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.GetOrdersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "orders", kind: "message", T: Order, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrdersResponse {
    return new GetOrdersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrdersResponse {
    return new GetOrdersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrdersResponse {
    return new GetOrdersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrdersResponse | PlainMessage<GetOrdersResponse> | undefined, b: GetOrdersResponse | PlainMessage<GetOrdersResponse> | undefined): boolean {
    return proto3.util.equals(GetOrdersResponse, a, b);
  }
}

/**
 * @generated from message cafelogos.PostOrderRequest
 */
export class PostOrderRequest extends Message<PostOrderRequest> {
  /**
   * @generated from field: cafelogos.Order order = 1;
   */
  order?: Order;

  constructor(data?: PartialMessage<PostOrderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.PostOrderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order", kind: "message", T: Order },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostOrderRequest {
    return new PostOrderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostOrderRequest {
    return new PostOrderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostOrderRequest {
    return new PostOrderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostOrderRequest | PlainMessage<PostOrderRequest> | undefined, b: PostOrderRequest | PlainMessage<PostOrderRequest> | undefined): boolean {
    return proto3.util.equals(PostOrderRequest, a, b);
  }
}

/**
 * @generated from message cafelogos.GetProductsResponse
 */
export class GetProductsResponse extends Message<GetProductsResponse> {
  /**
   * @generated from field: repeated cafelogos.Product products = 1;
   */
  products: Product[] = [];

  constructor(data?: PartialMessage<GetProductsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.GetProductsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "products", kind: "message", T: Product, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProductsResponse {
    return new GetProductsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProductsResponse {
    return new GetProductsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProductsResponse {
    return new GetProductsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetProductsResponse | PlainMessage<GetProductsResponse> | undefined, b: GetProductsResponse | PlainMessage<GetProductsResponse> | undefined): boolean {
    return proto3.util.equals(GetProductsResponse, a, b);
  }
}

/**
 * @generated from message cafelogos.GetProductCategoriesResponse
 */
export class GetProductCategoriesResponse extends Message<GetProductCategoriesResponse> {
  /**
   * @generated from field: repeated cafelogos.ProductCategory product_categories = 1;
   */
  productCategories: ProductCategory[] = [];

  constructor(data?: PartialMessage<GetProductCategoriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.GetProductCategoriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product_categories", kind: "message", T: ProductCategory, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProductCategoriesResponse {
    return new GetProductCategoriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProductCategoriesResponse {
    return new GetProductCategoriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProductCategoriesResponse {
    return new GetProductCategoriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetProductCategoriesResponse | PlainMessage<GetProductCategoriesResponse> | undefined, b: GetProductCategoriesResponse | PlainMessage<GetProductCategoriesResponse> | undefined): boolean {
    return proto3.util.equals(GetProductCategoriesResponse, a, b);
  }
}

/**
 * @generated from message cafelogos.PostProductCategoryRequest
 */
export class PostProductCategoryRequest extends Message<PostProductCategoryRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<PostProductCategoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.PostProductCategoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostProductCategoryRequest {
    return new PostProductCategoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostProductCategoryRequest {
    return new PostProductCategoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostProductCategoryRequest {
    return new PostProductCategoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostProductCategoryRequest | PlainMessage<PostProductCategoryRequest> | undefined, b: PostProductCategoryRequest | PlainMessage<PostProductCategoryRequest> | undefined): boolean {
    return proto3.util.equals(PostProductCategoryRequest, a, b);
  }
}

/**
 * @generated from message cafelogos.PostProductRequest
 */
export class PostProductRequest extends Message<PostProductRequest> {
  /**
   * @generated from field: cafelogos.ProductParam product = 1;
   */
  product?: ProductParam;

  constructor(data?: PartialMessage<PostProductRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.PostProductRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product", kind: "message", T: ProductParam },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostProductRequest {
    return new PostProductRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostProductRequest {
    return new PostProductRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostProductRequest {
    return new PostProductRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostProductRequest | PlainMessage<PostProductRequest> | undefined, b: PostProductRequest | PlainMessage<PostProductRequest> | undefined): boolean {
    return proto3.util.equals(PostProductRequest, a, b);
  }
}

/**
 * @generated from message cafelogos.UpdateProductRequest
 */
export class UpdateProductRequest extends Message<UpdateProductRequest> {
  /**
   * @generated from field: string product_id = 1;
   */
  productId = "";

  /**
   * @generated from field: cafelogos.ProductParam product = 2;
   */
  product?: ProductParam;

  constructor(data?: PartialMessage<UpdateProductRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.UpdateProductRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "product", kind: "message", T: ProductParam },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateProductRequest {
    return new UpdateProductRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateProductRequest {
    return new UpdateProductRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateProductRequest {
    return new UpdateProductRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateProductRequest | PlainMessage<UpdateProductRequest> | undefined, b: UpdateProductRequest | PlainMessage<UpdateProductRequest> | undefined): boolean {
    return proto3.util.equals(UpdateProductRequest, a, b);
  }
}

/**
 * @generated from message cafelogos.DeleteProductRequest
 */
export class DeleteProductRequest extends Message<DeleteProductRequest> {
  /**
   * @generated from field: string product_id = 1;
   */
  productId = "";

  constructor(data?: PartialMessage<DeleteProductRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.DeleteProductRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteProductRequest {
    return new DeleteProductRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteProductRequest {
    return new DeleteProductRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteProductRequest {
    return new DeleteProductRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteProductRequest | PlainMessage<DeleteProductRequest> | undefined, b: DeleteProductRequest | PlainMessage<DeleteProductRequest> | undefined): boolean {
    return proto3.util.equals(DeleteProductRequest, a, b);
  }
}

/**
 * @generated from message cafelogos.PostStockRequest
 */
export class PostStockRequest extends Message<PostStockRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: uint32 quantity = 2;
   */
  quantity = 0;

  constructor(data?: PartialMessage<PostStockRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.PostStockRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "quantity", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostStockRequest {
    return new PostStockRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostStockRequest {
    return new PostStockRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostStockRequest {
    return new PostStockRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostStockRequest | PlainMessage<PostStockRequest> | undefined, b: PostStockRequest | PlainMessage<PostStockRequest> | undefined): boolean {
    return proto3.util.equals(PostStockRequest, a, b);
  }
}

/**
 * @generated from message cafelogos.GetStocksResponse
 */
export class GetStocksResponse extends Message<GetStocksResponse> {
  /**
   * @generated from field: repeated cafelogos.Stock stocks = 1;
   */
  stocks: Stock[] = [];

  constructor(data?: PartialMessage<GetStocksResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.GetStocksResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stocks", kind: "message", T: Stock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStocksResponse {
    return new GetStocksResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStocksResponse {
    return new GetStocksResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStocksResponse {
    return new GetStocksResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetStocksResponse | PlainMessage<GetStocksResponse> | undefined, b: GetStocksResponse | PlainMessage<GetStocksResponse> | undefined): boolean {
    return proto3.util.equals(GetStocksResponse, a, b);
  }
}

/**
 * @generated from message cafelogos.PostCoffeeBeanRequest
 */
export class PostCoffeeBeanRequest extends Message<PostCoffeeBeanRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: int32 gram_quantity = 2;
   */
  gramQuantity = 0;

  constructor(data?: PartialMessage<PostCoffeeBeanRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.PostCoffeeBeanRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "gram_quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostCoffeeBeanRequest {
    return new PostCoffeeBeanRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostCoffeeBeanRequest {
    return new PostCoffeeBeanRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostCoffeeBeanRequest {
    return new PostCoffeeBeanRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostCoffeeBeanRequest | PlainMessage<PostCoffeeBeanRequest> | undefined, b: PostCoffeeBeanRequest | PlainMessage<PostCoffeeBeanRequest> | undefined): boolean {
    return proto3.util.equals(PostCoffeeBeanRequest, a, b);
  }
}

/**
 * @generated from message cafelogos.GetCoffeeBeansResponse
 */
export class GetCoffeeBeansResponse extends Message<GetCoffeeBeansResponse> {
  /**
   * @generated from field: repeated cafelogos.CoffeeBean coffee_beans = 1;
   */
  coffeeBeans: CoffeeBean[] = [];

  constructor(data?: PartialMessage<GetCoffeeBeansResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.GetCoffeeBeansResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "coffee_beans", kind: "message", T: CoffeeBean, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCoffeeBeansResponse {
    return new GetCoffeeBeansResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCoffeeBeansResponse {
    return new GetCoffeeBeansResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCoffeeBeansResponse {
    return new GetCoffeeBeansResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCoffeeBeansResponse | PlainMessage<GetCoffeeBeansResponse> | undefined, b: GetCoffeeBeansResponse | PlainMessage<GetCoffeeBeansResponse> | undefined): boolean {
    return proto3.util.equals(GetCoffeeBeansResponse, a, b);
  }
}

/**
 * * Product 
 *
 * @generated from message cafelogos.Product
 */
export class Product extends Message<Product> {
  /**
   * @generated from field: string product_id = 1;
   */
  productId = "";

  /**
   * @generated from field: string product_name = 2;
   */
  productName = "";

  /**
   * @generated from field: cafelogos.ProductCategory product_category = 3;
   */
  productCategory?: ProductCategory;

  /**
   * @generated from field: cafelogos.ProductType product_type = 4;
   */
  productType = ProductType.COFFEE;

  /**
   * @generated from field: bool is_now_sales = 5;
   */
  isNowSales = false;

  /**
   * Only Coffee
   *
   * @generated from field: cafelogos.CoffeeBean coffee_bean = 6;
   */
  coffeeBean?: CoffeeBean;

  /**
   * @generated from field: repeated cafelogos.CoffeeBrew coffee_brews = 7;
   */
  coffeeBrews: CoffeeBrew[] = [];

  /**
   * Only Other
   *
   * @generated from field: uint64 amount = 8;
   */
  amount = protoInt64.zero;

  /**
   * @generated from field: cafelogos.Stock stock = 9;
   */
  stock?: Stock;

  constructor(data?: PartialMessage<Product>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.Product";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "product_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "product_category", kind: "message", T: ProductCategory },
    { no: 4, name: "product_type", kind: "enum", T: proto3.getEnumType(ProductType) },
    { no: 5, name: "is_now_sales", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "coffee_bean", kind: "message", T: CoffeeBean },
    { no: 7, name: "coffee_brews", kind: "message", T: CoffeeBrew, repeated: true },
    { no: 8, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "stock", kind: "message", T: Stock },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Product {
    return new Product().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Product {
    return new Product().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Product {
    return new Product().fromJsonString(jsonString, options);
  }

  static equals(a: Product | PlainMessage<Product> | undefined, b: Product | PlainMessage<Product> | undefined): boolean {
    return proto3.util.equals(Product, a, b);
  }
}

/**
 * @generated from message cafelogos.ProductParam
 */
export class ProductParam extends Message<ProductParam> {
  /**
   * @generated from field: string product_name = 1;
   */
  productName = "";

  /**
   * @generated from field: string product_category_id = 2;
   */
  productCategoryId = "";

  /**
   * @generated from field: cafelogos.ProductType product_type = 3;
   */
  productType = ProductType.COFFEE;

  /**
   * @generated from field: bool is_now_sales = 4;
   */
  isNowSales = false;

  /**
   * Only Coffee
   *
   * @generated from field: string coffee_bean_id = 5;
   */
  coffeeBeanId = "";

  /**
   * @generated from field: repeated cafelogos.CoffeeBrew coffee_brews = 6;
   */
  coffeeBrews: CoffeeBrew[] = [];

  /**
   * Only Other
   *
   * @generated from field: uint64 amount = 7;
   */
  amount = protoInt64.zero;

  /**
   * @generated from field: string stock_id = 8;
   */
  stockId = "";

  constructor(data?: PartialMessage<ProductParam>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.ProductParam";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "product_category_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "product_type", kind: "enum", T: proto3.getEnumType(ProductType) },
    { no: 4, name: "is_now_sales", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "coffee_bean_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "coffee_brews", kind: "message", T: CoffeeBrew, repeated: true },
    { no: 7, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "stock_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductParam {
    return new ProductParam().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductParam {
    return new ProductParam().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductParam {
    return new ProductParam().fromJsonString(jsonString, options);
  }

  static equals(a: ProductParam | PlainMessage<ProductParam> | undefined, b: ProductParam | PlainMessage<ProductParam> | undefined): boolean {
    return proto3.util.equals(ProductParam, a, b);
  }
}

/**
 * @generated from message cafelogos.ProductCategory
 */
export class ProductCategory extends Message<ProductCategory> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<ProductCategory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.ProductCategory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductCategory {
    return new ProductCategory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductCategory {
    return new ProductCategory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductCategory {
    return new ProductCategory().fromJsonString(jsonString, options);
  }

  static equals(a: ProductCategory | PlainMessage<ProductCategory> | undefined, b: ProductCategory | PlainMessage<ProductCategory> | undefined): boolean {
    return proto3.util.equals(ProductCategory, a, b);
  }
}

/**
 * @generated from message cafelogos.CoffeeBean
 */
export class CoffeeBean extends Message<CoffeeBean> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: int32 gram_quantity = 3;
   */
  gramQuantity = 0;

  constructor(data?: PartialMessage<CoffeeBean>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.CoffeeBean";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "gram_quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CoffeeBean {
    return new CoffeeBean().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CoffeeBean {
    return new CoffeeBean().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CoffeeBean {
    return new CoffeeBean().fromJsonString(jsonString, options);
  }

  static equals(a: CoffeeBean | PlainMessage<CoffeeBean> | undefined, b: CoffeeBean | PlainMessage<CoffeeBean> | undefined): boolean {
    return proto3.util.equals(CoffeeBean, a, b);
  }
}

/**
 * @generated from message cafelogos.CoffeeBrew
 */
export class CoffeeBrew extends Message<CoffeeBrew> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: uint32 bean_quantity_grams = 3;
   */
  beanQuantityGrams = 0;

  /**
   * @generated from field: uint64 amount = 4;
   */
  amount = protoInt64.zero;

  constructor(data?: PartialMessage<CoffeeBrew>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.CoffeeBrew";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "bean_quantity_grams", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CoffeeBrew {
    return new CoffeeBrew().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CoffeeBrew {
    return new CoffeeBrew().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CoffeeBrew {
    return new CoffeeBrew().fromJsonString(jsonString, options);
  }

  static equals(a: CoffeeBrew | PlainMessage<CoffeeBrew> | undefined, b: CoffeeBrew | PlainMessage<CoffeeBrew> | undefined): boolean {
    return proto3.util.equals(CoffeeBrew, a, b);
  }
}

/**
 * @generated from message cafelogos.Stock
 */
export class Stock extends Message<Stock> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: uint32 quantity = 3;
   */
  quantity = 0;

  constructor(data?: PartialMessage<Stock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.Stock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "quantity", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Stock {
    return new Stock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Stock {
    return new Stock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Stock {
    return new Stock().fromJsonString(jsonString, options);
  }

  static equals(a: Stock | PlainMessage<Stock> | undefined, b: Stock | PlainMessage<Stock> | undefined): boolean {
    return proto3.util.equals(Stock, a, b);
  }
}

/**
 * * Order 
 *
 * @generated from message cafelogos.Order
 */
export class Order extends Message<Order> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: repeated cafelogos.OrderItem items = 2;
   */
  items: OrderItem[] = [];

  /**
   * @generated from field: repeated cafelogos.Discount discounts = 3;
   */
  discounts: Discount[] = [];

  /**
   * @generated from field: cafelogos.Payment payment = 4;
   */
  payment?: Payment;

  /**
   * @generated from field: string payment_at = 5;
   */
  paymentAt = "";

  /**
   * @generated from field: string order_at = 6;
   */
  orderAt = "";

  /**
   * @generated from field: string call_number = 7;
   */
  callNumber = "";

  /**
   * @generated from field: string client_id = 8;
   */
  clientId = "";

  constructor(data?: PartialMessage<Order>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.Order";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "items", kind: "message", T: OrderItem, repeated: true },
    { no: 3, name: "discounts", kind: "message", T: Discount, repeated: true },
    { no: 4, name: "payment", kind: "message", T: Payment },
    { no: 5, name: "payment_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "order_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "call_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Order {
    return new Order().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Order {
    return new Order().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Order {
    return new Order().fromJsonString(jsonString, options);
  }

  static equals(a: Order | PlainMessage<Order> | undefined, b: Order | PlainMessage<Order> | undefined): boolean {
    return proto3.util.equals(Order, a, b);
  }
}

/**
 * @generated from message cafelogos.OrderItem
 */
export class OrderItem extends Message<OrderItem> {
  /**
   * @generated from field: string product_id = 1;
   */
  productId = "";

  /**
   * @generated from field: string quantity = 2;
   */
  quantity = "";

  /**
   * @generated from field: uint64 amount = 3;
   */
  amount = protoInt64.zero;

  /**
   * @generated from field: string coffee_brew_id = 4;
   */
  coffeeBrewId = "";

  constructor(data?: PartialMessage<OrderItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.OrderItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "quantity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "coffee_brew_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrderItem {
    return new OrderItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrderItem {
    return new OrderItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrderItem {
    return new OrderItem().fromJsonString(jsonString, options);
  }

  static equals(a: OrderItem | PlainMessage<OrderItem> | undefined, b: OrderItem | PlainMessage<OrderItem> | undefined): boolean {
    return proto3.util.equals(OrderItem, a, b);
  }
}

/**
 * @generated from message cafelogos.Discount
 */
export class Discount extends Message<Discount> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: cafelogos.Discount.DiscountType type = 2;
   */
  type = Discount_DiscountType.PRICE;

  /**
   * @generated from field: uint64 discount_amount = 3;
   */
  discountAmount = protoInt64.zero;

  constructor(data?: PartialMessage<Discount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.Discount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(Discount_DiscountType) },
    { no: 3, name: "discount_amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Discount {
    return new Discount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Discount {
    return new Discount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Discount {
    return new Discount().fromJsonString(jsonString, options);
  }

  static equals(a: Discount | PlainMessage<Discount> | undefined, b: Discount | PlainMessage<Discount> | undefined): boolean {
    return proto3.util.equals(Discount, a, b);
  }
}

/**
 * @generated from enum cafelogos.Discount.DiscountType
 */
export enum Discount_DiscountType {
  /**
   * @generated from enum value: PRICE = 0;
   */
  PRICE = 0,
}
// Retrieve enum metadata with: proto3.getEnumType(Discount_DiscountType)
proto3.util.setEnumType(Discount_DiscountType, "cafelogos.Discount.DiscountType", [
  { no: 0, name: "PRICE" },
]);

/**
 * @generated from message cafelogos.Payment
 */
export class Payment extends Message<Payment> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: cafelogos.Payment.PaymentType type = 2;
   */
  type = Payment_PaymentType.CASH;

  /**
   * @generated from field: uint64 receive_amount = 3;
   */
  receiveAmount = protoInt64.zero;

  /**
   * @generated from field: uint64 payment_amount = 4;
   */
  paymentAmount = protoInt64.zero;

  /**
   * @generated from field: uint64 change_amount = 5;
   */
  changeAmount = protoInt64.zero;

  constructor(data?: PartialMessage<Payment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.Payment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(Payment_PaymentType) },
    { no: 3, name: "receive_amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payment_amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "change_amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Payment {
    return new Payment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Payment {
    return new Payment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Payment {
    return new Payment().fromJsonString(jsonString, options);
  }

  static equals(a: Payment | PlainMessage<Payment> | undefined, b: Payment | PlainMessage<Payment> | undefined): boolean {
    return proto3.util.equals(Payment, a, b);
  }
}

/**
 * @generated from enum cafelogos.Payment.PaymentType
 */
export enum Payment_PaymentType {
  /**
   * @generated from enum value: CASH = 0;
   */
  CASH = 0,
}
// Retrieve enum metadata with: proto3.getEnumType(Payment_PaymentType)
proto3.util.setEnumType(Payment_PaymentType, "cafelogos.Payment.PaymentType", [
  { no: 0, name: "CASH" },
]);

