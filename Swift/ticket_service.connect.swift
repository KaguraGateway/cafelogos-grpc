// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: ticket_service.proto
//

import Connect
import Foundation
import SwiftProtobuf

public protocol Cafelogos_TicketServiceClientInterface: Sendable {

    @discardableResult
    func `issueTicket`(request: Cafelogos_RequestIssueTicket, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_ResponseIssueTicket>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `issueTicket`(request: Cafelogos_RequestIssueTicket, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_ResponseIssueTicket>

    @discardableResult
    func `revokeTicket`(request: Cafelogos_RequestRevokeTicket, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_ResponseRevokeTicket>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `revokeTicket`(request: Cafelogos_RequestRevokeTicket, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_ResponseRevokeTicket>
}

/// Concrete implementation of `Cafelogos_TicketServiceClientInterface`.
public final class Cafelogos_TicketServiceClient: Cafelogos_TicketServiceClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @discardableResult
    public func `issueTicket`(request: Cafelogos_RequestIssueTicket, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_ResponseIssueTicket>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.TicketService/IssueTicket", request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `issueTicket`(request: Cafelogos_RequestIssueTicket, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_ResponseIssueTicket> {
        return await self.client.unary(path: "/cafelogos.TicketService/IssueTicket", request: request, headers: headers)
    }

    @discardableResult
    public func `revokeTicket`(request: Cafelogos_RequestRevokeTicket, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_ResponseRevokeTicket>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.TicketService/RevokeTicket", request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `revokeTicket`(request: Cafelogos_RequestRevokeTicket, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_ResponseRevokeTicket> {
        return await self.client.unary(path: "/cafelogos.TicketService/RevokeTicket", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let issueTicket = Connect.MethodSpec(name: "IssueTicket", service: "cafelogos.TicketService", type: .unary)
            public static let revokeTicket = Connect.MethodSpec(name: "RevokeTicket", service: "cafelogos.TicketService", type: .unary)
        }
    }
}
