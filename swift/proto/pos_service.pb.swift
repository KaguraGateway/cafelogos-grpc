// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/pos_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Cafelogos_ProductType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case coffee // = 0
  case other // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .coffee
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .coffee
    case 1: self = .other
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .coffee: return 0
    case .other: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Cafelogos_ProductType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Cafelogos_ProductType] = [
    .coffee,
    .other,
  ]
}

#endif  // swift(>=4.2)

///*
/// Request/Response
struct Cafelogos_GetOrdersRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Cafelogos_GetOrdersResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var orders: [Cafelogos_Order] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Cafelogos_PostOrderRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var order: Cafelogos_Order {
    get {return _order ?? Cafelogos_Order()}
    set {_order = newValue}
  }
  /// Returns true if `order` has been explicitly set.
  var hasOrder: Bool {return self._order != nil}
  /// Clears the value of `order`. Subsequent reads from it will return its default value.
  mutating func clearOrder() {self._order = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _order: Cafelogos_Order? = nil
}

struct Cafelogos_PostOrderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Cafelogos_DeleteAllOrdersRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Cafelogos_DeleteAllOrdersResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Cafelogos_GetProductsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Cafelogos_GetProductsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var products: [Cafelogos_Product] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Cafelogos_OrderNotificationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var order: Cafelogos_Order {
    get {return _order ?? Cafelogos_Order()}
    set {_order = newValue}
  }
  /// Returns true if `order` has been explicitly set.
  var hasOrder: Bool {return self._order != nil}
  /// Clears the value of `order`. Subsequent reads from it will return its default value.
  mutating func clearOrder() {self._order = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _order: Cafelogos_Order? = nil
}

struct Cafelogos_OrderNotificationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///* Product 
struct Cafelogos_Product {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var productID: String {
    get {return _storage._productID}
    set {_uniqueStorage()._productID = newValue}
  }

  var productName: String {
    get {return _storage._productName}
    set {_uniqueStorage()._productName = newValue}
  }

  var productCategory: Cafelogos_ProductCategory {
    get {return _storage._productCategory ?? Cafelogos_ProductCategory()}
    set {_uniqueStorage()._productCategory = newValue}
  }
  /// Returns true if `productCategory` has been explicitly set.
  var hasProductCategory: Bool {return _storage._productCategory != nil}
  /// Clears the value of `productCategory`. Subsequent reads from it will return its default value.
  mutating func clearProductCategory() {_uniqueStorage()._productCategory = nil}

  var productType: Cafelogos_ProductType {
    get {return _storage._productType}
    set {_uniqueStorage()._productType = newValue}
  }

  var isNowSales: Bool {
    get {return _storage._isNowSales}
    set {_uniqueStorage()._isNowSales = newValue}
  }

  /// Only Coffee
  var coffeeBean: Cafelogos_CoffeeBean {
    get {return _storage._coffeeBean ?? Cafelogos_CoffeeBean()}
    set {_uniqueStorage()._coffeeBean = newValue}
  }
  /// Returns true if `coffeeBean` has been explicitly set.
  var hasCoffeeBean: Bool {return _storage._coffeeBean != nil}
  /// Clears the value of `coffeeBean`. Subsequent reads from it will return its default value.
  mutating func clearCoffeeBean() {_uniqueStorage()._coffeeBean = nil}

  var coffeeHowToBrew: Cafelogos_CoffeeHowToBrew {
    get {return _storage._coffeeHowToBrew ?? Cafelogos_CoffeeHowToBrew()}
    set {_uniqueStorage()._coffeeHowToBrew = newValue}
  }
  /// Returns true if `coffeeHowToBrew` has been explicitly set.
  var hasCoffeeHowToBrew: Bool {return _storage._coffeeHowToBrew != nil}
  /// Clears the value of `coffeeHowToBrew`. Subsequent reads from it will return its default value.
  mutating func clearCoffeeHowToBrew() {_uniqueStorage()._coffeeHowToBrew = nil}

  /// Only Other
  var amount: UInt64 {
    get {return _storage._amount}
    set {_uniqueStorage()._amount = newValue}
  }

  var stock: Cafelogos_Stock {
    get {return _storage._stock ?? Cafelogos_Stock()}
    set {_uniqueStorage()._stock = newValue}
  }
  /// Returns true if `stock` has been explicitly set.
  var hasStock: Bool {return _storage._stock != nil}
  /// Clears the value of `stock`. Subsequent reads from it will return its default value.
  mutating func clearStock() {_uniqueStorage()._stock = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Cafelogos_ProductCategory {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Cafelogos_CoffeeBean {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var name: String = String()

  var gramQuantity: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Cafelogos_CoffeeHowToBrew {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var name: String = String()

  var beanQuantityGrams: UInt32 = 0

  var amount: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Cafelogos_Stock {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var name: String = String()

  var quantity: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///* Order 
struct Cafelogos_Order {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var items: [Cafelogos_OrderItem] = []

  var discounts: [Cafelogos_Discount] = []

  var payment: Cafelogos_Payment {
    get {return _payment ?? Cafelogos_Payment()}
    set {_payment = newValue}
  }
  /// Returns true if `payment` has been explicitly set.
  var hasPayment: Bool {return self._payment != nil}
  /// Clears the value of `payment`. Subsequent reads from it will return its default value.
  mutating func clearPayment() {self._payment = nil}

  var paymentAt: String = String()

  var orderAt: String = String()

  var callNumber: String = String()

  var clientID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _payment: Cafelogos_Payment? = nil
}

struct Cafelogos_OrderItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var productID: String = String()

  var quantity: String = String()

  var amount: UInt64 = 0

  var coffeeBrewID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Cafelogos_Discount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Cafelogos_Payment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var type: Cafelogos_Payment.PaymentType = .cash

  var receiveAmount: UInt64 = 0

  var paymentAmount: UInt64 = 0

  var changeAmount: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum PaymentType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case cash // = 0
    case UNRECOGNIZED(Int)

    init() {
      self = .cash
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .cash
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .cash: return 0
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Cafelogos_Payment.PaymentType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Cafelogos_Payment.PaymentType] = [
    .cash,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Cafelogos_ProductType: @unchecked Sendable {}
extension Cafelogos_GetOrdersRequest: @unchecked Sendable {}
extension Cafelogos_GetOrdersResponse: @unchecked Sendable {}
extension Cafelogos_PostOrderRequest: @unchecked Sendable {}
extension Cafelogos_PostOrderResponse: @unchecked Sendable {}
extension Cafelogos_DeleteAllOrdersRequest: @unchecked Sendable {}
extension Cafelogos_DeleteAllOrdersResponse: @unchecked Sendable {}
extension Cafelogos_GetProductsRequest: @unchecked Sendable {}
extension Cafelogos_GetProductsResponse: @unchecked Sendable {}
extension Cafelogos_OrderNotificationRequest: @unchecked Sendable {}
extension Cafelogos_OrderNotificationResponse: @unchecked Sendable {}
extension Cafelogos_Product: @unchecked Sendable {}
extension Cafelogos_ProductCategory: @unchecked Sendable {}
extension Cafelogos_CoffeeBean: @unchecked Sendable {}
extension Cafelogos_CoffeeHowToBrew: @unchecked Sendable {}
extension Cafelogos_Stock: @unchecked Sendable {}
extension Cafelogos_Order: @unchecked Sendable {}
extension Cafelogos_OrderItem: @unchecked Sendable {}
extension Cafelogos_Discount: @unchecked Sendable {}
extension Cafelogos_Payment: @unchecked Sendable {}
extension Cafelogos_Payment.PaymentType: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cafelogos"

extension Cafelogos_ProductType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "COFFEE"),
    1: .same(proto: "OTHER"),
  ]
}

extension Cafelogos_GetOrdersRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetOrdersRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cafelogos_GetOrdersRequest, rhs: Cafelogos_GetOrdersRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_GetOrdersResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetOrdersResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "orders"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.orders) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.orders.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.orders, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cafelogos_GetOrdersResponse, rhs: Cafelogos_GetOrdersResponse) -> Bool {
    if lhs.orders != rhs.orders {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_PostOrderRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PostOrderRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "order"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._order) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._order {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cafelogos_PostOrderRequest, rhs: Cafelogos_PostOrderRequest) -> Bool {
    if lhs._order != rhs._order {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_PostOrderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PostOrderResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cafelogos_PostOrderResponse, rhs: Cafelogos_PostOrderResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_DeleteAllOrdersRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteAllOrdersRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cafelogos_DeleteAllOrdersRequest, rhs: Cafelogos_DeleteAllOrdersRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_DeleteAllOrdersResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteAllOrdersResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cafelogos_DeleteAllOrdersResponse, rhs: Cafelogos_DeleteAllOrdersResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_GetProductsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetProductsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cafelogos_GetProductsRequest, rhs: Cafelogos_GetProductsRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_GetProductsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetProductsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "products"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.products) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.products.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.products, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cafelogos_GetProductsResponse, rhs: Cafelogos_GetProductsResponse) -> Bool {
    if lhs.products != rhs.products {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_OrderNotificationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OrderNotificationRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "order"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._order) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._order {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cafelogos_OrderNotificationRequest, rhs: Cafelogos_OrderNotificationRequest) -> Bool {
    if lhs._order != rhs._order {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_OrderNotificationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OrderNotificationResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cafelogos_OrderNotificationResponse, rhs: Cafelogos_OrderNotificationResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Product: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Product"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "product_id"),
    2: .standard(proto: "product_name"),
    3: .standard(proto: "product_category"),
    4: .standard(proto: "product_type"),
    5: .standard(proto: "is_now_sales"),
    6: .standard(proto: "coffee_bean"),
    7: .standard(proto: "coffee_how_to_brew"),
    8: .same(proto: "amount"),
    9: .same(proto: "stock"),
  ]

  fileprivate class _StorageClass {
    var _productID: String = String()
    var _productName: String = String()
    var _productCategory: Cafelogos_ProductCategory? = nil
    var _productType: Cafelogos_ProductType = .coffee
    var _isNowSales: Bool = false
    var _coffeeBean: Cafelogos_CoffeeBean? = nil
    var _coffeeHowToBrew: Cafelogos_CoffeeHowToBrew? = nil
    var _amount: UInt64 = 0
    var _stock: Cafelogos_Stock? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _productID = source._productID
      _productName = source._productName
      _productCategory = source._productCategory
      _productType = source._productType
      _isNowSales = source._isNowSales
      _coffeeBean = source._coffeeBean
      _coffeeHowToBrew = source._coffeeHowToBrew
      _amount = source._amount
      _stock = source._stock
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._productID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._productName) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._productCategory) }()
        case 4: try { try decoder.decodeSingularEnumField(value: &_storage._productType) }()
        case 5: try { try decoder.decodeSingularBoolField(value: &_storage._isNowSales) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._coffeeBean) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._coffeeHowToBrew) }()
        case 8: try { try decoder.decodeSingularUInt64Field(value: &_storage._amount) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._stock) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._productID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productID, fieldNumber: 1)
      }
      if !_storage._productName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productName, fieldNumber: 2)
      }
      try { if let v = _storage._productCategory {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if _storage._productType != .coffee {
        try visitor.visitSingularEnumField(value: _storage._productType, fieldNumber: 4)
      }
      if _storage._isNowSales != false {
        try visitor.visitSingularBoolField(value: _storage._isNowSales, fieldNumber: 5)
      }
      try { if let v = _storage._coffeeBean {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._coffeeHowToBrew {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      if _storage._amount != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._amount, fieldNumber: 8)
      }
      try { if let v = _storage._stock {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cafelogos_Product, rhs: Cafelogos_Product) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._productID != rhs_storage._productID {return false}
        if _storage._productName != rhs_storage._productName {return false}
        if _storage._productCategory != rhs_storage._productCategory {return false}
        if _storage._productType != rhs_storage._productType {return false}
        if _storage._isNowSales != rhs_storage._isNowSales {return false}
        if _storage._coffeeBean != rhs_storage._coffeeBean {return false}
        if _storage._coffeeHowToBrew != rhs_storage._coffeeHowToBrew {return false}
        if _storage._amount != rhs_storage._amount {return false}
        if _storage._stock != rhs_storage._stock {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_ProductCategory: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProductCategory"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cafelogos_ProductCategory, rhs: Cafelogos_ProductCategory) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_CoffeeBean: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CoffeeBean"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .standard(proto: "gram_quantity"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.gramQuantity) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.gramQuantity != 0 {
      try visitor.visitSingularInt32Field(value: self.gramQuantity, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cafelogos_CoffeeBean, rhs: Cafelogos_CoffeeBean) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.gramQuantity != rhs.gramQuantity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_CoffeeHowToBrew: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CoffeeHowToBrew"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .standard(proto: "bean_quantity_grams"),
    4: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.beanQuantityGrams) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.beanQuantityGrams != 0 {
      try visitor.visitSingularUInt32Field(value: self.beanQuantityGrams, fieldNumber: 3)
    }
    if self.amount != 0 {
      try visitor.visitSingularUInt64Field(value: self.amount, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cafelogos_CoffeeHowToBrew, rhs: Cafelogos_CoffeeHowToBrew) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.beanQuantityGrams != rhs.beanQuantityGrams {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Stock: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Stock"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "quantity"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.quantity) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.quantity != 0 {
      try visitor.visitSingularUInt32Field(value: self.quantity, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cafelogos_Stock, rhs: Cafelogos_Stock) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.quantity != rhs.quantity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Order: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Order"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "items"),
    3: .same(proto: "discounts"),
    4: .same(proto: "payment"),
    5: .standard(proto: "payment_at"),
    6: .standard(proto: "order_at"),
    7: .standard(proto: "call_number"),
    8: .standard(proto: "client_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.discounts) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._payment) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.paymentAt) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.orderAt) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.callNumber) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 2)
    }
    if !self.discounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.discounts, fieldNumber: 3)
    }
    try { if let v = self._payment {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.paymentAt.isEmpty {
      try visitor.visitSingularStringField(value: self.paymentAt, fieldNumber: 5)
    }
    if !self.orderAt.isEmpty {
      try visitor.visitSingularStringField(value: self.orderAt, fieldNumber: 6)
    }
    if !self.callNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.callNumber, fieldNumber: 7)
    }
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cafelogos_Order, rhs: Cafelogos_Order) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.items != rhs.items {return false}
    if lhs.discounts != rhs.discounts {return false}
    if lhs._payment != rhs._payment {return false}
    if lhs.paymentAt != rhs.paymentAt {return false}
    if lhs.orderAt != rhs.orderAt {return false}
    if lhs.callNumber != rhs.callNumber {return false}
    if lhs.clientID != rhs.clientID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_OrderItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OrderItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "product_id"),
    2: .same(proto: "quantity"),
    3: .same(proto: "amount"),
    4: .standard(proto: "coffee_brew_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.productID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.quantity) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.amount) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.coffeeBrewID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.productID.isEmpty {
      try visitor.visitSingularStringField(value: self.productID, fieldNumber: 1)
    }
    if !self.quantity.isEmpty {
      try visitor.visitSingularStringField(value: self.quantity, fieldNumber: 2)
    }
    if self.amount != 0 {
      try visitor.visitSingularUInt64Field(value: self.amount, fieldNumber: 3)
    }
    if !self.coffeeBrewID.isEmpty {
      try visitor.visitSingularStringField(value: self.coffeeBrewID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cafelogos_OrderItem, rhs: Cafelogos_OrderItem) -> Bool {
    if lhs.productID != rhs.productID {return false}
    if lhs.quantity != rhs.quantity {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.coffeeBrewID != rhs.coffeeBrewID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Discount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Discount"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cafelogos_Discount, rhs: Cafelogos_Discount) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Payment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Payment"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
    3: .standard(proto: "receive_amount"),
    4: .standard(proto: "payment_amount"),
    5: .standard(proto: "change_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.receiveAmount) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.paymentAmount) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.changeAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.type != .cash {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if self.receiveAmount != 0 {
      try visitor.visitSingularUInt64Field(value: self.receiveAmount, fieldNumber: 3)
    }
    if self.paymentAmount != 0 {
      try visitor.visitSingularUInt64Field(value: self.paymentAmount, fieldNumber: 4)
    }
    if self.changeAmount != 0 {
      try visitor.visitSingularUInt64Field(value: self.changeAmount, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cafelogos_Payment, rhs: Cafelogos_Payment) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.type != rhs.type {return false}
    if lhs.receiveAmount != rhs.receiveAmount {return false}
    if lhs.paymentAmount != rhs.paymentAmount {return false}
    if lhs.changeAmount != rhs.changeAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Payment.PaymentType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CASH"),
  ]
}
