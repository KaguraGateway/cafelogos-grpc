//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: proto/ticket_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Cafelogos_TicketServiceClient`, then call methods of this protocol to make API calls.
internal protocol Cafelogos_TicketServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cafelogos_TicketServiceClientInterceptorFactoryProtocol? { get }

  func issueTicket(
    _ request: Cafelogos_RequestIssueTicket,
    callOptions: CallOptions?
  ) -> UnaryCall<Cafelogos_RequestIssueTicket, Cafelogos_ResponseIssueTicket>

  func revokeTicket(
    _ request: Cafelogos_RequestRevokeTicket,
    callOptions: CallOptions?
  ) -> UnaryCall<Cafelogos_RequestRevokeTicket, Cafelogos_ResponseRevokeTicket>
}

extension Cafelogos_TicketServiceClientProtocol {
  internal var serviceName: String {
    return "cafelogos.TicketService"
  }

  /// Unary call to IssueTicket
  ///
  /// - Parameters:
  ///   - request: Request to send to IssueTicket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func issueTicket(
    _ request: Cafelogos_RequestIssueTicket,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cafelogos_RequestIssueTicket, Cafelogos_ResponseIssueTicket> {
    return self.makeUnaryCall(
      path: Cafelogos_TicketServiceClientMetadata.Methods.issueTicket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIssueTicketInterceptors() ?? []
    )
  }

  /// Unary call to RevokeTicket
  ///
  /// - Parameters:
  ///   - request: Request to send to RevokeTicket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func revokeTicket(
    _ request: Cafelogos_RequestRevokeTicket,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cafelogos_RequestRevokeTicket, Cafelogos_ResponseRevokeTicket> {
    return self.makeUnaryCall(
      path: Cafelogos_TicketServiceClientMetadata.Methods.revokeTicket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevokeTicketInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Cafelogos_TicketServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Cafelogos_TicketServiceNIOClient")
internal final class Cafelogos_TicketServiceClient: Cafelogos_TicketServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cafelogos_TicketServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Cafelogos_TicketServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cafelogos.TicketService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cafelogos_TicketServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Cafelogos_TicketServiceNIOClient: Cafelogos_TicketServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cafelogos_TicketServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the cafelogos.TicketService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cafelogos_TicketServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cafelogos_TicketServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cafelogos_TicketServiceClientInterceptorFactoryProtocol? { get }

  func makeIssueTicketCall(
    _ request: Cafelogos_RequestIssueTicket,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cafelogos_RequestIssueTicket, Cafelogos_ResponseIssueTicket>

  func makeRevokeTicketCall(
    _ request: Cafelogos_RequestRevokeTicket,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cafelogos_RequestRevokeTicket, Cafelogos_ResponseRevokeTicket>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cafelogos_TicketServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cafelogos_TicketServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Cafelogos_TicketServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeIssueTicketCall(
    _ request: Cafelogos_RequestIssueTicket,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cafelogos_RequestIssueTicket, Cafelogos_ResponseIssueTicket> {
    return self.makeAsyncUnaryCall(
      path: Cafelogos_TicketServiceClientMetadata.Methods.issueTicket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIssueTicketInterceptors() ?? []
    )
  }

  internal func makeRevokeTicketCall(
    _ request: Cafelogos_RequestRevokeTicket,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cafelogos_RequestRevokeTicket, Cafelogos_ResponseRevokeTicket> {
    return self.makeAsyncUnaryCall(
      path: Cafelogos_TicketServiceClientMetadata.Methods.revokeTicket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevokeTicketInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cafelogos_TicketServiceAsyncClientProtocol {
  internal func issueTicket(
    _ request: Cafelogos_RequestIssueTicket,
    callOptions: CallOptions? = nil
  ) async throws -> Cafelogos_ResponseIssueTicket {
    return try await self.performAsyncUnaryCall(
      path: Cafelogos_TicketServiceClientMetadata.Methods.issueTicket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIssueTicketInterceptors() ?? []
    )
  }

  internal func revokeTicket(
    _ request: Cafelogos_RequestRevokeTicket,
    callOptions: CallOptions? = nil
  ) async throws -> Cafelogos_ResponseRevokeTicket {
    return try await self.performAsyncUnaryCall(
      path: Cafelogos_TicketServiceClientMetadata.Methods.revokeTicket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevokeTicketInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Cafelogos_TicketServiceAsyncClient: Cafelogos_TicketServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cafelogos_TicketServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cafelogos_TicketServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Cafelogos_TicketServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'issueTicket'.
  func makeIssueTicketInterceptors() -> [ClientInterceptor<Cafelogos_RequestIssueTicket, Cafelogos_ResponseIssueTicket>]

  /// - Returns: Interceptors to use when invoking 'revokeTicket'.
  func makeRevokeTicketInterceptors() -> [ClientInterceptor<Cafelogos_RequestRevokeTicket, Cafelogos_ResponseRevokeTicket>]
}

internal enum Cafelogos_TicketServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "TicketService",
    fullName: "cafelogos.TicketService",
    methods: [
      Cafelogos_TicketServiceClientMetadata.Methods.issueTicket,
      Cafelogos_TicketServiceClientMetadata.Methods.revokeTicket,
    ]
  )

  internal enum Methods {
    internal static let issueTicket = GRPCMethodDescriptor(
      name: "IssueTicket",
      path: "/cafelogos.TicketService/IssueTicket",
      type: GRPCCallType.unary
    )

    internal static let revokeTicket = GRPCMethodDescriptor(
      name: "RevokeTicket",
      path: "/cafelogos.TicketService/RevokeTicket",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Cafelogos_TicketServiceProvider: CallHandlerProvider {
  var interceptors: Cafelogos_TicketServiceServerInterceptorFactoryProtocol? { get }

  func issueTicket(request: Cafelogos_RequestIssueTicket, context: StatusOnlyCallContext) -> EventLoopFuture<Cafelogos_ResponseIssueTicket>

  func revokeTicket(request: Cafelogos_RequestRevokeTicket, context: StatusOnlyCallContext) -> EventLoopFuture<Cafelogos_ResponseRevokeTicket>
}

extension Cafelogos_TicketServiceProvider {
  internal var serviceName: Substring {
    return Cafelogos_TicketServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "IssueTicket":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cafelogos_RequestIssueTicket>(),
        responseSerializer: ProtobufSerializer<Cafelogos_ResponseIssueTicket>(),
        interceptors: self.interceptors?.makeIssueTicketInterceptors() ?? [],
        userFunction: self.issueTicket(request:context:)
      )

    case "RevokeTicket":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cafelogos_RequestRevokeTicket>(),
        responseSerializer: ProtobufSerializer<Cafelogos_ResponseRevokeTicket>(),
        interceptors: self.interceptors?.makeRevokeTicketInterceptors() ?? [],
        userFunction: self.revokeTicket(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cafelogos_TicketServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cafelogos_TicketServiceServerInterceptorFactoryProtocol? { get }

  func issueTicket(
    request: Cafelogos_RequestIssueTicket,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cafelogos_ResponseIssueTicket

  func revokeTicket(
    request: Cafelogos_RequestRevokeTicket,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cafelogos_ResponseRevokeTicket
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cafelogos_TicketServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cafelogos_TicketServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Cafelogos_TicketServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Cafelogos_TicketServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "IssueTicket":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cafelogos_RequestIssueTicket>(),
        responseSerializer: ProtobufSerializer<Cafelogos_ResponseIssueTicket>(),
        interceptors: self.interceptors?.makeIssueTicketInterceptors() ?? [],
        wrapping: { try await self.issueTicket(request: $0, context: $1) }
      )

    case "RevokeTicket":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cafelogos_RequestRevokeTicket>(),
        responseSerializer: ProtobufSerializer<Cafelogos_ResponseRevokeTicket>(),
        interceptors: self.interceptors?.makeRevokeTicketInterceptors() ?? [],
        wrapping: { try await self.revokeTicket(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Cafelogos_TicketServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'issueTicket'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIssueTicketInterceptors() -> [ServerInterceptor<Cafelogos_RequestIssueTicket, Cafelogos_ResponseIssueTicket>]

  /// - Returns: Interceptors to use when handling 'revokeTicket'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRevokeTicketInterceptors() -> [ServerInterceptor<Cafelogos_RequestRevokeTicket, Cafelogos_ResponseRevokeTicket>]
}

internal enum Cafelogos_TicketServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "TicketService",
    fullName: "cafelogos.TicketService",
    methods: [
      Cafelogos_TicketServiceServerMetadata.Methods.issueTicket,
      Cafelogos_TicketServiceServerMetadata.Methods.revokeTicket,
    ]
  )

  internal enum Methods {
    internal static let issueTicket = GRPCMethodDescriptor(
      name: "IssueTicket",
      path: "/cafelogos.TicketService/IssueTicket",
      type: GRPCCallType.unary
    )

    internal static let revokeTicket = GRPCMethodDescriptor(
      name: "RevokeTicket",
      path: "/cafelogos.TicketService/RevokeTicket",
      type: GRPCCallType.unary
    )
  }
}
