//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: proto/pos_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Cafelogos_PosServiceClient`, then call methods of this protocol to make API calls.
internal protocol Cafelogos_PosServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cafelogos_PosServiceClientInterceptorFactoryProtocol? { get }

  func getOrders(
    _ request: Cafelogos_GetOrdersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cafelogos_GetOrdersRequest, Cafelogos_GetOrdersResponse>

  func postOrder(
    _ request: Cafelogos_PostOrderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cafelogos_PostOrderRequest, Cafelogos_PostOrderResponse>

  func deleteAllOrders(
    _ request: Cafelogos_DeleteAllOrdersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cafelogos_DeleteAllOrdersRequest, Cafelogos_DeleteAllOrdersResponse>

  func getProducts(
    _ request: Cafelogos_GetProductsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cafelogos_GetProductsRequest, Cafelogos_GetProductsResponse>

  func orderNotification(
    callOptions: CallOptions?,
    handler: @escaping (Cafelogos_OrderNotificationResponse) -> Void
  ) -> BidirectionalStreamingCall<Cafelogos_OrderNotificationRequest, Cafelogos_OrderNotificationResponse>
}

extension Cafelogos_PosServiceClientProtocol {
  internal var serviceName: String {
    return "cafelogos.PosService"
  }

  /// Unary call to GetOrders
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOrders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getOrders(
    _ request: Cafelogos_GetOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cafelogos_GetOrdersRequest, Cafelogos_GetOrdersResponse> {
    return self.makeUnaryCall(
      path: Cafelogos_PosServiceClientMetadata.Methods.getOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOrdersInterceptors() ?? []
    )
  }

  /// Unary call to PostOrder
  ///
  /// - Parameters:
  ///   - request: Request to send to PostOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func postOrder(
    _ request: Cafelogos_PostOrderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cafelogos_PostOrderRequest, Cafelogos_PostOrderResponse> {
    return self.makeUnaryCall(
      path: Cafelogos_PosServiceClientMetadata.Methods.postOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePostOrderInterceptors() ?? []
    )
  }

  /// Unary call to DeleteAllOrders
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteAllOrders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteAllOrders(
    _ request: Cafelogos_DeleteAllOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cafelogos_DeleteAllOrdersRequest, Cafelogos_DeleteAllOrdersResponse> {
    return self.makeUnaryCall(
      path: Cafelogos_PosServiceClientMetadata.Methods.deleteAllOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAllOrdersInterceptors() ?? []
    )
  }

  /// Unary call to GetProducts
  ///
  /// - Parameters:
  ///   - request: Request to send to GetProducts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getProducts(
    _ request: Cafelogos_GetProductsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cafelogos_GetProductsRequest, Cafelogos_GetProductsResponse> {
    return self.makeUnaryCall(
      path: Cafelogos_PosServiceClientMetadata.Methods.getProducts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProductsInterceptors() ?? []
    )
  }

  /// Bidirectional streaming call to OrderNotification
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func orderNotification(
    callOptions: CallOptions? = nil,
    handler: @escaping (Cafelogos_OrderNotificationResponse) -> Void
  ) -> BidirectionalStreamingCall<Cafelogos_OrderNotificationRequest, Cafelogos_OrderNotificationResponse> {
    return self.makeBidirectionalStreamingCall(
      path: Cafelogos_PosServiceClientMetadata.Methods.orderNotification.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOrderNotificationInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension Cafelogos_PosServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Cafelogos_PosServiceNIOClient")
internal final class Cafelogos_PosServiceClient: Cafelogos_PosServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cafelogos_PosServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Cafelogos_PosServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cafelogos.PosService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cafelogos_PosServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Cafelogos_PosServiceNIOClient: Cafelogos_PosServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cafelogos_PosServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the cafelogos.PosService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cafelogos_PosServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cafelogos_PosServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cafelogos_PosServiceClientInterceptorFactoryProtocol? { get }

  func makeGetOrdersCall(
    _ request: Cafelogos_GetOrdersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cafelogos_GetOrdersRequest, Cafelogos_GetOrdersResponse>

  func makePostOrderCall(
    _ request: Cafelogos_PostOrderRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cafelogos_PostOrderRequest, Cafelogos_PostOrderResponse>

  func makeDeleteAllOrdersCall(
    _ request: Cafelogos_DeleteAllOrdersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cafelogos_DeleteAllOrdersRequest, Cafelogos_DeleteAllOrdersResponse>

  func makeGetProductsCall(
    _ request: Cafelogos_GetProductsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cafelogos_GetProductsRequest, Cafelogos_GetProductsResponse>

  func makeOrderNotificationCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Cafelogos_OrderNotificationRequest, Cafelogos_OrderNotificationResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cafelogos_PosServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cafelogos_PosServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Cafelogos_PosServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeGetOrdersCall(
    _ request: Cafelogos_GetOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cafelogos_GetOrdersRequest, Cafelogos_GetOrdersResponse> {
    return self.makeAsyncUnaryCall(
      path: Cafelogos_PosServiceClientMetadata.Methods.getOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOrdersInterceptors() ?? []
    )
  }

  internal func makePostOrderCall(
    _ request: Cafelogos_PostOrderRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cafelogos_PostOrderRequest, Cafelogos_PostOrderResponse> {
    return self.makeAsyncUnaryCall(
      path: Cafelogos_PosServiceClientMetadata.Methods.postOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePostOrderInterceptors() ?? []
    )
  }

  internal func makeDeleteAllOrdersCall(
    _ request: Cafelogos_DeleteAllOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cafelogos_DeleteAllOrdersRequest, Cafelogos_DeleteAllOrdersResponse> {
    return self.makeAsyncUnaryCall(
      path: Cafelogos_PosServiceClientMetadata.Methods.deleteAllOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAllOrdersInterceptors() ?? []
    )
  }

  internal func makeGetProductsCall(
    _ request: Cafelogos_GetProductsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cafelogos_GetProductsRequest, Cafelogos_GetProductsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cafelogos_PosServiceClientMetadata.Methods.getProducts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProductsInterceptors() ?? []
    )
  }

  internal func makeOrderNotificationCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Cafelogos_OrderNotificationRequest, Cafelogos_OrderNotificationResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Cafelogos_PosServiceClientMetadata.Methods.orderNotification.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOrderNotificationInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cafelogos_PosServiceAsyncClientProtocol {
  internal func getOrders(
    _ request: Cafelogos_GetOrdersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cafelogos_GetOrdersResponse {
    return try await self.performAsyncUnaryCall(
      path: Cafelogos_PosServiceClientMetadata.Methods.getOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOrdersInterceptors() ?? []
    )
  }

  internal func postOrder(
    _ request: Cafelogos_PostOrderRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cafelogos_PostOrderResponse {
    return try await self.performAsyncUnaryCall(
      path: Cafelogos_PosServiceClientMetadata.Methods.postOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePostOrderInterceptors() ?? []
    )
  }

  internal func deleteAllOrders(
    _ request: Cafelogos_DeleteAllOrdersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cafelogos_DeleteAllOrdersResponse {
    return try await self.performAsyncUnaryCall(
      path: Cafelogos_PosServiceClientMetadata.Methods.deleteAllOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAllOrdersInterceptors() ?? []
    )
  }

  internal func getProducts(
    _ request: Cafelogos_GetProductsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cafelogos_GetProductsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cafelogos_PosServiceClientMetadata.Methods.getProducts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProductsInterceptors() ?? []
    )
  }

  internal func orderNotification<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Cafelogos_OrderNotificationResponse> where RequestStream: Sequence, RequestStream.Element == Cafelogos_OrderNotificationRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Cafelogos_PosServiceClientMetadata.Methods.orderNotification.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOrderNotificationInterceptors() ?? []
    )
  }

  internal func orderNotification<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Cafelogos_OrderNotificationResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Cafelogos_OrderNotificationRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Cafelogos_PosServiceClientMetadata.Methods.orderNotification.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOrderNotificationInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Cafelogos_PosServiceAsyncClient: Cafelogos_PosServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cafelogos_PosServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cafelogos_PosServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Cafelogos_PosServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getOrders'.
  func makeGetOrdersInterceptors() -> [ClientInterceptor<Cafelogos_GetOrdersRequest, Cafelogos_GetOrdersResponse>]

  /// - Returns: Interceptors to use when invoking 'postOrder'.
  func makePostOrderInterceptors() -> [ClientInterceptor<Cafelogos_PostOrderRequest, Cafelogos_PostOrderResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteAllOrders'.
  func makeDeleteAllOrdersInterceptors() -> [ClientInterceptor<Cafelogos_DeleteAllOrdersRequest, Cafelogos_DeleteAllOrdersResponse>]

  /// - Returns: Interceptors to use when invoking 'getProducts'.
  func makeGetProductsInterceptors() -> [ClientInterceptor<Cafelogos_GetProductsRequest, Cafelogos_GetProductsResponse>]

  /// - Returns: Interceptors to use when invoking 'orderNotification'.
  func makeOrderNotificationInterceptors() -> [ClientInterceptor<Cafelogos_OrderNotificationRequest, Cafelogos_OrderNotificationResponse>]
}

internal enum Cafelogos_PosServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "PosService",
    fullName: "cafelogos.PosService",
    methods: [
      Cafelogos_PosServiceClientMetadata.Methods.getOrders,
      Cafelogos_PosServiceClientMetadata.Methods.postOrder,
      Cafelogos_PosServiceClientMetadata.Methods.deleteAllOrders,
      Cafelogos_PosServiceClientMetadata.Methods.getProducts,
      Cafelogos_PosServiceClientMetadata.Methods.orderNotification,
    ]
  )

  internal enum Methods {
    internal static let getOrders = GRPCMethodDescriptor(
      name: "GetOrders",
      path: "/cafelogos.PosService/GetOrders",
      type: GRPCCallType.unary
    )

    internal static let postOrder = GRPCMethodDescriptor(
      name: "PostOrder",
      path: "/cafelogos.PosService/PostOrder",
      type: GRPCCallType.unary
    )

    internal static let deleteAllOrders = GRPCMethodDescriptor(
      name: "DeleteAllOrders",
      path: "/cafelogos.PosService/DeleteAllOrders",
      type: GRPCCallType.unary
    )

    internal static let getProducts = GRPCMethodDescriptor(
      name: "GetProducts",
      path: "/cafelogos.PosService/GetProducts",
      type: GRPCCallType.unary
    )

    internal static let orderNotification = GRPCMethodDescriptor(
      name: "OrderNotification",
      path: "/cafelogos.PosService/OrderNotification",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Cafelogos_PosServiceProvider: CallHandlerProvider {
  var interceptors: Cafelogos_PosServiceServerInterceptorFactoryProtocol? { get }

  func getOrders(request: Cafelogos_GetOrdersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cafelogos_GetOrdersResponse>

  func postOrder(request: Cafelogos_PostOrderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cafelogos_PostOrderResponse>

  func deleteAllOrders(request: Cafelogos_DeleteAllOrdersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cafelogos_DeleteAllOrdersResponse>

  func getProducts(request: Cafelogos_GetProductsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cafelogos_GetProductsResponse>

  func orderNotification(context: StreamingResponseCallContext<Cafelogos_OrderNotificationResponse>) -> EventLoopFuture<(StreamEvent<Cafelogos_OrderNotificationRequest>) -> Void>
}

extension Cafelogos_PosServiceProvider {
  internal var serviceName: Substring {
    return Cafelogos_PosServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetOrders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cafelogos_GetOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Cafelogos_GetOrdersResponse>(),
        interceptors: self.interceptors?.makeGetOrdersInterceptors() ?? [],
        userFunction: self.getOrders(request:context:)
      )

    case "PostOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cafelogos_PostOrderRequest>(),
        responseSerializer: ProtobufSerializer<Cafelogos_PostOrderResponse>(),
        interceptors: self.interceptors?.makePostOrderInterceptors() ?? [],
        userFunction: self.postOrder(request:context:)
      )

    case "DeleteAllOrders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cafelogos_DeleteAllOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Cafelogos_DeleteAllOrdersResponse>(),
        interceptors: self.interceptors?.makeDeleteAllOrdersInterceptors() ?? [],
        userFunction: self.deleteAllOrders(request:context:)
      )

    case "GetProducts":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cafelogos_GetProductsRequest>(),
        responseSerializer: ProtobufSerializer<Cafelogos_GetProductsResponse>(),
        interceptors: self.interceptors?.makeGetProductsInterceptors() ?? [],
        userFunction: self.getProducts(request:context:)
      )

    case "OrderNotification":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cafelogos_OrderNotificationRequest>(),
        responseSerializer: ProtobufSerializer<Cafelogos_OrderNotificationResponse>(),
        interceptors: self.interceptors?.makeOrderNotificationInterceptors() ?? [],
        observerFactory: self.orderNotification(context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cafelogos_PosServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cafelogos_PosServiceServerInterceptorFactoryProtocol? { get }

  func getOrders(
    request: Cafelogos_GetOrdersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cafelogos_GetOrdersResponse

  func postOrder(
    request: Cafelogos_PostOrderRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cafelogos_PostOrderResponse

  func deleteAllOrders(
    request: Cafelogos_DeleteAllOrdersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cafelogos_DeleteAllOrdersResponse

  func getProducts(
    request: Cafelogos_GetProductsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cafelogos_GetProductsResponse

  func orderNotification(
    requestStream: GRPCAsyncRequestStream<Cafelogos_OrderNotificationRequest>,
    responseStream: GRPCAsyncResponseStreamWriter<Cafelogos_OrderNotificationResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cafelogos_PosServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cafelogos_PosServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Cafelogos_PosServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Cafelogos_PosServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetOrders":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cafelogos_GetOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Cafelogos_GetOrdersResponse>(),
        interceptors: self.interceptors?.makeGetOrdersInterceptors() ?? [],
        wrapping: { try await self.getOrders(request: $0, context: $1) }
      )

    case "PostOrder":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cafelogos_PostOrderRequest>(),
        responseSerializer: ProtobufSerializer<Cafelogos_PostOrderResponse>(),
        interceptors: self.interceptors?.makePostOrderInterceptors() ?? [],
        wrapping: { try await self.postOrder(request: $0, context: $1) }
      )

    case "DeleteAllOrders":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cafelogos_DeleteAllOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Cafelogos_DeleteAllOrdersResponse>(),
        interceptors: self.interceptors?.makeDeleteAllOrdersInterceptors() ?? [],
        wrapping: { try await self.deleteAllOrders(request: $0, context: $1) }
      )

    case "GetProducts":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cafelogos_GetProductsRequest>(),
        responseSerializer: ProtobufSerializer<Cafelogos_GetProductsResponse>(),
        interceptors: self.interceptors?.makeGetProductsInterceptors() ?? [],
        wrapping: { try await self.getProducts(request: $0, context: $1) }
      )

    case "OrderNotification":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cafelogos_OrderNotificationRequest>(),
        responseSerializer: ProtobufSerializer<Cafelogos_OrderNotificationResponse>(),
        interceptors: self.interceptors?.makeOrderNotificationInterceptors() ?? [],
        wrapping: { try await self.orderNotification(requestStream: $0, responseStream: $1, context: $2) }
      )

    default:
      return nil
    }
  }
}

internal protocol Cafelogos_PosServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'getOrders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetOrdersInterceptors() -> [ServerInterceptor<Cafelogos_GetOrdersRequest, Cafelogos_GetOrdersResponse>]

  /// - Returns: Interceptors to use when handling 'postOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePostOrderInterceptors() -> [ServerInterceptor<Cafelogos_PostOrderRequest, Cafelogos_PostOrderResponse>]

  /// - Returns: Interceptors to use when handling 'deleteAllOrders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteAllOrdersInterceptors() -> [ServerInterceptor<Cafelogos_DeleteAllOrdersRequest, Cafelogos_DeleteAllOrdersResponse>]

  /// - Returns: Interceptors to use when handling 'getProducts'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetProductsInterceptors() -> [ServerInterceptor<Cafelogos_GetProductsRequest, Cafelogos_GetProductsResponse>]

  /// - Returns: Interceptors to use when handling 'orderNotification'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOrderNotificationInterceptors() -> [ServerInterceptor<Cafelogos_OrderNotificationRequest, Cafelogos_OrderNotificationResponse>]
}

internal enum Cafelogos_PosServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "PosService",
    fullName: "cafelogos.PosService",
    methods: [
      Cafelogos_PosServiceServerMetadata.Methods.getOrders,
      Cafelogos_PosServiceServerMetadata.Methods.postOrder,
      Cafelogos_PosServiceServerMetadata.Methods.deleteAllOrders,
      Cafelogos_PosServiceServerMetadata.Methods.getProducts,
      Cafelogos_PosServiceServerMetadata.Methods.orderNotification,
    ]
  )

  internal enum Methods {
    internal static let getOrders = GRPCMethodDescriptor(
      name: "GetOrders",
      path: "/cafelogos.PosService/GetOrders",
      type: GRPCCallType.unary
    )

    internal static let postOrder = GRPCMethodDescriptor(
      name: "PostOrder",
      path: "/cafelogos.PosService/PostOrder",
      type: GRPCCallType.unary
    )

    internal static let deleteAllOrders = GRPCMethodDescriptor(
      name: "DeleteAllOrders",
      path: "/cafelogos.PosService/DeleteAllOrders",
      type: GRPCCallType.unary
    )

    internal static let getProducts = GRPCMethodDescriptor(
      name: "GetProducts",
      path: "/cafelogos.PosService/GetProducts",
      type: GRPCCallType.unary
    )

    internal static let orderNotification = GRPCMethodDescriptor(
      name: "OrderNotification",
      path: "/cafelogos.PosService/OrderNotification",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}
